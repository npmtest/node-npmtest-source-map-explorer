{"/home/travis/build/npmtest/node-npmtest-source-map-explorer/test.js":"/* istanbul instrument in package npmtest_source_map_explorer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-source-map-explorer/lib.npmtest_source_map_explorer.js":"/* istanbul instrument in package npmtest_source_map_explorer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_source_map_explorer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_source_map_explorer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-source-map-explorer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-source-map-explorer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_source_map_explorer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_source_map_explorer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_source_map_explorer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_source_map_explorer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_source_map_explorer.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_source_map_explorer.__dirname +\n                    '/lib.npmtest_source_map_explorer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-source-map-explorer/source-map-explorer/index.js":"#!/usr/bin/env node\n\nvar doc = [\n'Analyze and debug space usage through source maps.',\n'',\n'Usage:',\n'  source-map-explorer <script.js> [<script.js.map>]',\n'  source-map-explorer [--json | --html | --tsv] <script.js> [<script.js.map>] [--replace=BEFORE --with=AFTER]... [--noroot]',\n'  source-map-explorer -h | --help | --version',\n'',\n'If the script file has an inline source map, you may omit the map parameter.',\n'',\n'Options:',\n'  -h --help  Show this screen.',\n'  --version  Show version.',\n'',\n'     --json  Output JSON (on stdout) instead of generating HTML',\n'             and opening the browser.',\n'     --tsv   Output TSV (on stdout) instead of generating HTML',\n'             and opening the browser.',\n'     --html  Output HTML (on stdout) rather than opening a browser.',\n'',\n'   --noroot  To simplify the visualization, source-map-explorer',\n'             will remove any prefix shared by all sources. If you',\n'             wish to disable this behavior, set --noroot.',\n'',\n'  --replace=BEFORE  Apply a simple find/replace on source file',\n'                    names. This can be used to fix some oddities',\n'                    with paths which appear in the source map',\n'                    generation process.  Accepts regular expressions.',\n'      --with=AFTER  See --replace.',\n].join('\\n');\n\nvar fs = require('fs'),\n    path = require('path'),\n    sourcemap = require('source-map'),\n    convert = require('convert-source-map'),\n    temp = require('temp'),\n    open = require('open'),\n    _ = require('underscore'),\n    docopt = require('docopt').docopt,\n    fileURL = require('file-url'),\n    btoa = require('btoa');\n\nfunction computeGeneratedFileSizes(mapConsumer, generatedJs) {\n  var lines = generatedJs.split('\\n');\n  var sourceExtrema = {};  // source -> {min: num, max: num}\n  var numChars = 0;\n  var lastSource = null;\n  for (var line = 1; line <= lines.length; line++) {\n    var lineText = lines[line - 1];\n    var numCols = lineText.length;\n    for (var column = 0; column < numCols; column++, numChars++) {\n      var pos = mapConsumer.originalPositionFor({line:line, column:column});\n      var source = pos.source;\n      if (source == null) {\n        // Often this is from the '// #sourceMap' comment itself.\n        continue;\n      }\n\n      if (source != lastSource) {\n        if (!(source in sourceExtrema)) {\n          sourceExtrema[source] = {min: numChars};\n          lastSource = source;\n        } else {\n          // source-map reports odd positions for bits between files.\n        }\n      } else {\n        sourceExtrema[source].max = numChars;\n      }\n    }\n  }\n  return _.mapObject(sourceExtrema, function(v) {\n    return v.max - v.min + 1\n  });\n}\n\nvar SOURCE_MAP_INFO_URL = 'https://github.com/danvk/source-map-explorer/blob/master/README.md#generating-source-maps';\n\nfunction loadSourceMap(jsFile, mapFile) {\n  var jsData = fs.readFileSync(jsFile).toString();\n\n  var mapConsumer;\n  if (mapFile) {\n    var sourcemapData = fs.readFileSync(mapFile).toString();\n    mapConsumer = new sourcemap.SourceMapConsumer(sourcemapData);\n  } else {\n    // Try to read a source map from a 'sourceMappingURL' comment.\n    var converter = convert.fromSource(jsData);\n    if (!converter) {\n      converter = convert.fromMapFileSource(jsData, path.dirname(jsFile));\n    }\n    if (!converter) {\n      console.error('Unable to find a source map.');\n      console.error('See ', SOURCE_MAP_INFO_URL);\n      return null;\n    }\n    mapConsumer = new sourcemap.SourceMapConsumer(converter.toJSON());\n  }\n\n  if (!mapConsumer) {\n    console.error('Unable to find a source map.');\n    console.error('See ', SOURCE_MAP_INFO_URL);\n    return null;\n  }\n\n  return {\n    mapConsumer: mapConsumer,\n    jsData: jsData\n  };\n}\n\n// See http://stackoverflow.com/a/1917041/388951\nfunction commonPathPrefix(array){\n  if (array.length == 0) return '';\n  var A= array.concat().sort(),\n  a1= A[0].split(/(\\/)/), a2= A[A.length-1].split(/(\\/)/), L= a1.length, i= 0;\n  while(i<L && a1[i] === a2[i]) i++;\n  return a1.slice(0, i).join('');\n}\n\n// Apply a transform to the keys of an object, leaving the values unaffected.\nfunction mapKeys(obj, fn) {\n  return _.object(_.map(obj, function(v, k) { return [fn(k), v]; }));\n}\n\nfunction adjustSourcePaths(sizes, findRoot, finds, replaces) {\n  if (findRoot) {\n    var prefix = commonPathPrefix(_.keys(sizes));\n    var len = prefix.length;\n    if (len) {\n      sizes = mapKeys(sizes, function(source) { return source.slice(len); })\n    }\n  }\n\n  for (var i = 0; i < finds.length; i++) {\n    var before = new RegExp(finds[i]),\n        after = replaces[i];\n    sizes = mapKeys(sizes, function(source) {\n      return source.replace(before, after);\n    });\n  }\n\n  return sizes;\n}\n\nfunction validateArgs(args) {\n  if (args['--replace'].length != args['--with'].length) {\n    console.error('--replace flags must be paired with --with flags.');\n    process.exit(1);\n  }\n}\n\n\nif (require.main === module) {\n\nvar args = docopt(doc, {version: '1.3.3'});\nvalidateArgs(args);\nvar data = loadSourceMap(args['<script.js>'], args['<script.js.map>']);\nif (!data) {\n  process.exit(1);\n}\nvar mapConsumer = data.mapConsumer,\n    jsData = data.jsData;\n\nvar sizes = computeGeneratedFileSizes(mapConsumer, jsData);\n\nif (_.size(sizes) == 1) {\n  console.error('Your source map only contains one source (',\n                _.keys(sizes)[0], ')');\n  console.error(\"This typically means that your source map doesn't map all the way back to the original sources.\");\n  console.error(\"This can happen if you use browserify+uglifyjs, for example, and don't set the --in-source-map flag to uglify.\");\n  console.error('See ', SOURCE_MAP_INFO_URL);\n  process.exit(1);\n}\n\nsizes = adjustSourcePaths(sizes, !args['--noroot'], args['--replace'], args['--with']);\n\nif (args['--json']) {\n  console.log(JSON.stringify(sizes, null, '  '));\n  process.exit(0);\n}\n\nif (args['--tsv']) {\n  console.log('Source\\tSize');\n  _.each(sizes, function(source, size) { console.log(size + '\\t' + source); })\n  process.exit(0);\n}\n\nvar assets = {\n  underscoreJs: btoa(fs.readFileSync(require.resolve('underscore'))),\n  prettyBytesJs: btoa(fs.readFileSync(require.resolve('./vendor/prettybytes.js'))),\n  webtreemapJs: btoa(fs.readFileSync(require.resolve('./vendor/webtreemap.js'))),\n  webtreemapCss: btoa(fs.readFileSync(require.resolve('./vendor/webtreemap.css'))),\n};\n\nvar html = fs.readFileSync(path.join(__dirname, 'tree-viz.html')).toString();\n\nhtml = html.replace('INSERT TREE HERE', JSON.stringify(sizes, null, '  '))\n           .replace('INSERT TITLE HERE', args['<script.js>'])\n           .replace('INSERT underscore.js HERE', 'data:application/javascript;base64,' + assets.underscoreJs)\n           .replace('INSERT prettybytes.js HERE', 'data:application/javascript;base64,' + assets.prettyBytesJs)\n           .replace('INSERT webtreemap.js HERE', 'data:application/javascript;base64,' + assets.webtreemapJs)\n           .replace('INSERT webtreemap.css HERE', 'data:text/css;base64,' + assets.webtreemapCss);\n\nif (args['--html']) {\n  console.log(html);\n  process.exit(0);\n}\n\nvar tempName = temp.path({suffix: '.html'});\nfs.writeFileSync(tempName, html);\nopen(tempName, function(error) {\n  if (!error) return;\n  console.error('Unable to open web browser.');\n  console.error('Either run with --html, --json or --tsv, or view HTML for the visualization at:');\n  console.error(tempName);\n});\n\n}\n\n// Exports are here mostly for testing.\nmodule.exports = {\n  loadSourceMap: loadSourceMap,\n  computeGeneratedFileSizes: computeGeneratedFileSizes,\n  adjustSourcePaths: adjustSourcePaths,\n  mapKeys: mapKeys,\n  commonPathPrefix: commonPathPrefix\n};\n"}